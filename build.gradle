plugins {
    id 'java'
    id 'org.springframework.boot' version '3.5.3'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'info.solidsoft.pitest' version '1.15.0'
}

group = 'com.erickWck'
version = '0.0.1-SNAPSHOT'
description = "Gestão de voos (número do voo, origem, destino, data, assentos disponíveis)"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

ext{
    set('otelVersion', "1.33.3")
    set('springCloudVersion', "2024.0.0")
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'
    implementation 'org.flywaydb:flyway-core:9.8.1'
    implementation 'org.springframework.retry:spring-retry'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    runtimeOnly 'org.postgresql:postgresql'
    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    runtimeOnly "io.opentelemetry.javaagent:opentelemetry-javaagent:${otelVersion}"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.springframework.boot:spring-boot-starter-webflux'

    // Plugin do PITest para JUnit 5
    pitest 'org.pitest:pitest-junit5-plugin:1.2.1'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

springBoot {
    buildInfo()
}

pitest {
    targetClasses = ['com.erickWck.ticket_service.*']
    targetTests = ['com.erickWck.ticket_service.*']
    excludedMethods = [
            'getAirlineOrThrow',
            'getAircraftOrThrow'
    ]
    outputFormats = ['HTML']
    threads = 4
    timestampedReports = false
    junit5PluginVersion = '1.2.1'
}

bootBuildImage {
    builder = "docker.io/paketobuildpacks/builder-jammy-base"
    imageName = "ghcr.io/mscairlinestickets/ticket-service"
    environment = [
        "BP_JVM_VERSION": "17",
        "BP_IMAGE_LABELS": """
            org.opencontainers.image.title=ticket-service
            org.opencontainers.image.description=Serviço responsável por emissão de passagens
            org.opencontainers.image.source=https://github.com/mscairlinestickets/ticket-service
            org.opencontainers.image.version=${project.version}
            org.opencontainers.image.created=${new Date().format("yyyy-MM-dd'T'HH:mm:ssXXX")}
        """
    ]

    docker {
        publishRegistry {
            username = project.findProperty("registryUsername") ?: System.getenv("GITHUB_USERNAME")
            password = project.findProperty("registryToken") ?: System.getenv("GITHUB_TOKEN")
            url = project.findProperty("registryUrl") ?: "https://ghcr.io"
        }
    }
}



tasks.named('test') {
    useJUnitPlatform()
}

